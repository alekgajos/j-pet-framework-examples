/**
 *  @copyright Copyright 2016 The J-PET Framework Authors. All rights reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may find a copy of the License in the LICENCE file.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *  @file SignalsAndHits.h
 */

#ifndef SIGNALSANDHITS_H
#define SIGNALSANDHITS_H

#include <vector>
#include <map>
#include <JPetUserTask/JPetUserTask.h>
#include <JPetRawSignal/JPetRawSignal.h>
#include <JPetTimeWindow/JPetTimeWindow.h>
#include "JPetRecoSignal/JPetRecoSignal.h"
#include <JPetHit/JPetHit.h>
#include "../LargeBarrelAnalysis/HitFinderTools.h"

#ifdef __CINT__
#define override
#endif

class SignalsAndHits: public JPetUserTask
{
public:
  SignalsAndHits(const char* name);
  virtual ~SignalsAndHits();
  virtual bool init() override;
  virtual bool exec() override;
  virtual bool terminate() override;
  bool fSaveControlHistos = true;

protected:
  // from SignalFinder
  void saveRawSignals(const std::vector<JPetRawSignal>& sigChVec);
  const std::string fEdgeMaxTimeParamKey = "SignalFinder_EdgeMaxTime_float"; 
  const std::string fLeadTrailMaxTimeParamKey = "SignalFinder_LeadTrailMaxTime_float";
  Float_t kSigChEdgeMaxTime = 20000; //[ps]
  Float_t kSigChLeadTrailMaxTime = 300000; //[ps]
  const int kNumOfThresholds = 4;
  // from SignalTransformer
  JPetPhysSignal createPhysSignal(const JPetRawSignal& signal);
  // from HitFinder
  HitFinderTools::VelocityMap fVelocityMap;
  bool kFirstTime = true;
  HitFinderTools::SignalsContainer fAllSignalsInTimeWindow;
  HitFinderTools HitTools;
  std::string fVelocityCalibrationFilePath = "resultsForThresholda.txt";
  HitFinderTools::VelocityMap readVelocityFile();
  void fillSignalsMap(const JPetPhysSignal& signal);
  const std::string fTimeWindowWidthParamKey = "HitFinder_TimeWindowWidth_float";
  const std::string fVelocityCalibFileParamKey = "HitFinder_Velocity_Calibration_File_Path_std::string";
  double kTimeWindowWidth = 50000; /// in ps -> 50ns. Maximal time difference between signals

};
#endif
/*  !SIGNALSANDHITS_H */
